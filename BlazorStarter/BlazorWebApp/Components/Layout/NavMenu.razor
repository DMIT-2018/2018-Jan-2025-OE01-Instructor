@implements IDisposable

@inject NavigationManager NavigationManager

<MudNavMenu>
    <MudNavLink Href="" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Home">Home</MudNavLink>
    <MudNavLink Href="counter" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Add">Counter</MudNavLink>
    <AuthorizeView Roles="Admin">
        <Authorized>
            <MudNavLink Href="weather" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.List">Weather</MudNavLink>
        </Authorized>
        <NotAuthorized>
            <MudText>No Weather for you!</MudText>
        </NotAuthorized>
    </AuthorizeView>
    <AuthorizeView Roles="Manager, Peeps">
        <Authorized>
           <MudText>You are not an admin!</MudText>
        </Authorized>
    </AuthorizeView>
    <!-- To hide elements from Unauthorized users ensure they are wrapped in an AuthorizeView -->
    <AuthorizeView>
        <Authorized>
            <MudNavGroup Title="Sample Pages">
                <MudNavLink Href="SamplePages/Basics" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Abc">Basics</MudNavLink>
                <!-- 
                    Can only nest AuthorizeView by add Context="innerContext" to the nested AuthorizeView 
                    Note: The innerContext can be named anything you want
                    You can nest as many AuthorizeView as you want as long as they
                    have different Context names
                -->
                <AuthorizeView Roles="Admin" Context="innerContext">
                    <Authorized>
                        <MudNavLink Href="SamplePages/WorkingVersion" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.AcUnit">Working Version</MudNavLink>
                    </Authorized>
                </AuthorizeView>
                <AuthorizeView Roles="Manager" Context="innerContext">
                    <Authorized>
                        <MudNavLink Href="SamplePages/Customers" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.CrueltyFree">Customers</MudNavLink>
                    </Authorized>
                </AuthorizeView>
                <MudNavLink Href="SamplePages/Dialogues" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.FormatAlignJustify">Dialogues</MudNavLink>
                <MudNavLink Href="SamplePages/MudStepper" Match="NavLinkMatch.Prefix" Icon="@DMITIcons.duckIcon">Mud Stepper Example</MudNavLink>
            </MudNavGroup>
        </Authorized>
    </AuthorizeView>
    
    <MudNavLink Href="auth" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Lock">Auth Required</MudNavLink>
    <AuthorizeView>
        <Authorized>
            <MudNavLink Href="Account/Manage" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Person">@context.User.Identity?.Name</MudNavLink>
            <form action="Account/Logout" method="post">
                <AntiforgeryToken />
                <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                <button type="submit" class="mud-nav-link mud-ripple">
                    <MudIcon Icon="@Icons.Material.Filled.Logout" Color="Color.Info" Class="mr-3"></MudIcon> Logout
                </button>
            </form>
        </Authorized>
        <NotAuthorized>
            <MudNavLink Href="Account/Register" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Person">Register</MudNavLink>
            <MudNavLink Href="Account/Login" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Password">Login</MudNavLink>
        </NotAuthorized>
    </AuthorizeView>
</MudNavMenu>


@code {
    private string? currentUrl;

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}